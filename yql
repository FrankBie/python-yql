#!/usr/bin/env python3

try:
    import json
except ImportError:
    import simplejson as json

import readline, os, sys, getopt

from urllib.request import urlopen
from urllib.parse import quote, urlencode
from urllib.error import URLError
from pprint import pprint

class Pager(object):
    def __init__(_):
        _.p = os.popen('more', 'w')

    def write(_, data):
        return _.p.write(data)

    def close(_):
        _.p.close()

class YQL(object):
    PublicURL = 'http://query.yahooapis.com/v1/public/yql?'
    Timeout = 5

    def __init__(_, public=True, diagnostics=True, env=[]):
        assert(public == True) # Private authentication not yet supported.
        _.qs = {
            'format': 'json',
            'callback': '',
            'diagnostics': {True: 'true', False:'False'}[diagnostics],
        }
        _.env = env
        _.url = _.PublicURL

    def __call__(_, query):
        try:
            _.qs['q'] = query
            q = urlencode(_.qs)
            for e in _.env:
                q += '&env=' + quote(e)
            r = urlopen(_.url + q, None, _.Timeout)
        except URLError as e:
            print("Error:", e)
            r = None
        if r is None:
            return None
        return json.loads(str(r.read(), 'utf-8'))

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'e:', ['env='])
    except getopt.error as e:
        print("Error:", e, file=sys.stderr)
        sys.exit(1)

    env = []
    for o, a in opts:
        if o in ('-e', '--env'):
            env.append(a)
    
    try:
        yql = YQL(env=env)
        if not os.isatty(sys.stdin.fileno()):
            makequery(yql, sys.stdin.read())
            return
        uses = []
        query = ''
        while True:
            if query:
                line = input('>>> ')
                query += ' ' + line.strip()
            else:
                line = input('> ')
                if not line:
                    break
                query = line.strip()
            if query.endswith(';'):
                if query.lower().startswith('use '):
                    uses.append(query)
                    print("Using {} additional tables".format(len(uses)))
                else:
                    makequery(yql, ' '.join(uses) + query)
                    uses = []
                query = ''
    except EOFError:
        print()

def makequery(yql, query):
    data = yql(query)
    if data and data['query'] and data['query']['results']:
        if os.isatty(sys.stdout.fileno()):
            more = Pager()
        else:
            more = sys.stdout
        if query.lower().startswith('desc '):
            desc(data['query']['results']['table'])
        else:
            for key in data['query']['results']:
                print(key + ':', file=more)
                pprint(data['query']['results'][key], stream=more)
            print("{} results returned".format(data['query']['count']), file=more)
        diagnostics(data['query'].get('diagnostics', {}), file=more)
        more.close()
    else:
        if data and data['query'] and 'diagnostics' in data['query']:
            diagnostics(data['query'].get('diagnostics', {}))
        print("No data")

def diagnostics(diag, file=None):
    if diag:
        if 'url' in diag:
            # Used external tables.
            if type(diag['url']) == list:
                # Multiple external tables.
                exectimes = ', '.join([ u['execution-time'] for u in diag['url'] ])
            else:
                exectimes = diag['url']['execution-time']
        else:
            exectimes = 'n/a'
        print('Time: Service: {}; User: {}; Exec: {}'.format(
            diag['service-time'],
            diag['user-time'],
            exectimes))

def desc(data, file=None):
    print("Table: {}".format(data['name']))
    if 'meta' in data:
        if 'description' in data['meta']:
            print("Description: {}".format(data['meta']['description']))
        if 'author' in data['meta']:
            print("Author: {}".format(data['meta']['author']))
        if 'sampleQuery' in data['meta']:
            print("Sample query: {}".format(data['meta']['sampleQuery']))
    print("Security: {}".format(data['security']))
    if 'select' in data['request']:
        print("Selects:")
        if not type(data['request']['select']) == list:
            data['request']['select'] = [ data['request']['select'] ]
        for n, sel in enumerate(data['request']['select']):
            lead = '{:2}. '.format(n + 1)
            if not type(sel['key']) == list:
                sel['key'] = [ sel['key'] ]
            for key in sel['key']:
                print("{}{} {} {}".format(
                    lead,
                    key['type'],
                    key['name'],
                    '(required)' if key.get('required', 'false') == 'true' else ''))
                lead = '    '
        

if __name__ == '__main__':
    main()
