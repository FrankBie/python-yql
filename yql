#!/usr/bin/env python3

try:
    import json
except ImportError:
    import simplejson as json

import readline, os, sys

from urllib.request import urlopen
from urllib.parse import quote
from urllib.error import URLError
from pprint import pprint

class Pager(object):
    def __init__(_):
        _.p = os.popen('more', 'w')

    def write(_, data):
        return _.p.write(data)

    def close(_):
        _.p.close()

class YQL(object):
    PublicURL = 'http://query.yahooapis.com/v1/public/yql?format=json&callback=&diagnostics=true&q='
    Timeout = 5

    def __init__(_, public=True):
        assert(public == True) # Private authentication not yet supported.
        _.url = _.PublicURL

    def __call__(_, query):
        try:
            r = urlopen(_.url + quote(query), None, _.Timeout)
        except URLError as e:
            print("Error:", e)
            r = None
        if r is None:
            return None
        return json.loads(str(r.read(), 'utf-8'))

def main():
    try:
        yql = YQL()
        if not os.isatty(sys.stdin.fileno()):
            makequery(yql, sys.stdin.read())
            return
        query = ''
        while True:
            if query:
                line = input('>>> ')
                query += ' ' + line.strip()
            else:
                line = input('> ')
                if not line:
                    break
                query = line.strip()
            if query.endswith(';'):
                makequery(yql, query)
                query = ''
    except EOFError:
        print()

def makequery(yql, query):
    data = yql(query)
    if data and data['query'] and data['query']['results']:
        if os.isatty(sys.stdout.fileno()):
            more = Pager()
        else:
            more = sys.stdout
        for key in data['query']['results']:
            print(key + ':', file=more)
            pprint(data['query']['results'][key], stream=more)
        print("{} results returned".format(data['query']['count']), file=more)
        diagnostics(data['query'].get('diagnostics', {}), file=more)
        more.close()
    else:
        if data and data['query'] and 'diagnostics' in data['query']:
            diagnostics(data['query'].get('diagnostics', {}))
        print("No data")

def diagnostics(diag, file=None):
    if diag:
        if 'url' in diag:
            # Used external tables.
            if type(diag['url']) == list:
                # Multiple external tables.
                exectimes = ', '.join([ u['execution-time'] for u in diag['url'] ])
            else:
                exectimes = diag['url']['execution-time']
        else:
            exectimes = 'n/a'
        print('Time: Service: {}; User: {}; Exec: {}'.format(
            diag['service-time'],
            diag['user-time'],
            exectimes))

if __name__ == '__main__':
    main()
